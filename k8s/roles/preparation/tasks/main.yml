---
- name: Reset ufw and allow everything
  community.general.ufw:
    state: reset
    policy: allow

- name: Allow all access to port 6443
  ufw:
    rule: allow
    port: 6443
    proto: tcp

- name: Enable IPv4 forwarding
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: "1"
    state: present
    reload: true

- name: Enable IPv6 forwarding
  ansible.posix.sysctl:
    name: net.ipv6.conf.all.forwarding
    value: "1"
    state: present
    reload: true
  when: ansible_all_ipv6_addresses

- name: Populate service facts
  ansible.builtin.service_facts:

- name: Allow UFW Exceptions
  block:
    - name: Get ufw status
      ansible.builtin.command:
        cmd: ufw status
      changed_when: false
      register: ufw_status

    - name: If ufw enabled, open etcd ports
      community.general.ufw:
        rule: allow
        port: "2379:2381"
        proto: tcp

    - name: If ufw enabled, allow default CIDRs
      community.general.ufw:
        rule: allow
        src: '{{ item }}'
      loop: "{{ (cluster_cidr + ',' + service_cidr) | split(',') }}"

- name: Check for Apparmor existence
  ansible.builtin.stat:
    path: /sys/module/apparmor/parameters/enabled
  register: apparmor_enabled

- name: Check if Apparmor is enabled
  when: apparmor_enabled.stat.exists
  ansible.builtin.command: cat /sys/module/apparmor/parameters/enabled
  register: apparmor_status
  changed_when: false

- name: Make sure curl is installed
  block:
    - name: Clean apt cache
      become: true
      shell: |
        apt-get clean
        apt-get autoremove -y
        rm -rf /var/lib/apt/lists/*
        apt-get update
        apt install curl

    # - name: Ensure curl is installed
    #   become: true
    #   apt:
    #     name: curl
    #     state: present


- name: Configure containerd
  block:
  - name: Create containerd config file
    file:
      path: "/etc/modules-load.d/containerd.conf"
      state: "touch"

  - name: Add conf for containerd
    blockinfile:
      path: "/etc/modules-load.d/containerd.conf"
      block: |
            overlay
            br_netfilter

  - name: modprobe
    shell: |
            sudo modprobe overlay
            sudo modprobe br_netfilter


  - name: Set system configurations for Kubernetes networking
    file:
      path: "/etc/sysctl.d/99-kubernetes-cri.conf"
      state: "touch"

  - name: Add conf for containerd
    blockinfile:
      path: "/etc/sysctl.d/99-kubernetes-cri.conf"
      block: |
            net.bridge.bridge-nf-call-iptables = 1
            net.ipv4.ip_forward = 1
            net.bridge.bridge-nf-call-ip6tables = 1

  - name: Apply new settings
    command: sudo sysctl --system

- name: Setup Docker repository
  block:
    - name: Remove invalid Kubernetes repository file
      become: true
      file:
        path: /etc/apt/sources.list.d/kubernetes.list
        state: absent
      ignore_errors: true

    - name: Remove existing Docker repository files
      become: true
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/apt/sources.list.d/archive_uri-https_download_docker_com_linux_ubuntu-jammy.list
        - /etc/apt/sources.list.d/download_docker_com_linux_ubuntu.list

    - name: Get Docker GPG key
      become: true
      shell:
        cmd: curl https://download.docker.com/linux/ubuntu/gpg > /usr/share/keyrings/docker-archive-keyring-armored.gpg

    - name: Process Docker key
      become: true
      shell:
        cmd: cat /usr/share/keyrings/docker-archive-keyring-armored.gpg | gpg --batch --yes --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

    - name: Configure Docker apt source
      become: true
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu jammy stable"
        state: present

- name: Install containerd (specific version)
  block:
    - name: Clean apt cache
      become: true
      shell: |
        apt-get clean
        apt-get autoremove -y
        rm -rf /var/lib/apt/lists/*

    - name: Update apt cache
      become: true
      apt:
        update_cache: yes

    - name: Install containerd.io (specific version)
      become: true
      shell: |
        apt-get install -y containerd.io={{ containerdversion }} || apt-get install -y containerd.io
      register: containerd_installed

    - name: Ensure containerd configuration directory exists
      become: true
      file:
        path: /etc/containerd
        state: directory

    - name: Generate default containerd configuration
      become: true
      shell: |
        containerd config default | tee /etc/containerd/config.toml >/dev/null 2>&1
      when: containerd_installed.rc == 0

    - name: Update containerd configuration for systemd cgroup
      become: true
      shell: |
        sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml
      when: containerd_installed.rc == 0

    - name: Restart containerd
      become: true
      systemd:
        name: containerd
        state: restarted
      when: containerd_installed.rc == 0


- name: disable swap
  shell: |
          sudo swapoff -a
          sudo sed -ri '/\sswap\s/s/^#?/#/' /etc/fstab

- name: install and configure dependencies
  apt:
    update_cache: yes
    pkg:
      - apt-transport-https
      - gnupg-agent
      - ca-certificates
      - software-properties-common

- name: Prepare Kubernetes Installation
  block:
    - name: Remove invalid Kubernetes repository file
      become: true
      file:
        path: /etc/apt/sources.list.d/kubernetes.list
        state: absent
      ignore_errors: true

    - name: Ensure the directory for apt keyrings exists
      become: true
      file:
        path: /etc/apt/keyrings
        state: directory

    - name: add google repository
      shell: |
              curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
              echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

    - name: Update and upgrade apt packages
      become: true
      apt:
        upgrade: yes
        update_cache: yes

- name: Install Kubernetes components
  block:
    - name: Install kubectl
      become: true
      apt:
        name: kubectl={{ kubernetesversion }}.*
        state: present
        update_cache: yes

    - name: Install kubelet
      become: true
      apt:
        name: kubelet={{ kubernetesversion }}.*
        state: present
        update_cache: yes

    - name: Install kubeadm
      become: true
      apt:
        name: kubeadm={{ kubernetesversion }}.*
        state: present
        update_cache: yes

    - name: Enable the kubelet service
      become: true
      service:
        name: kubelet
        enabled: yes
        state: started

  # shell: |
  #         sudo apt-get update
  #         sudo apt-get install -y kubelet={{ kubernetesversion }} kubeadm={{ kubernetesversion }} kubectl={{ kubernetesversion }}
  #         sudo apt-mark hold cri-tools kubelet kubeadm kubectl
  # register: kubeinstallversion
  # until: "kubeinstallversion is not failed"
  # retries: 5
  # delay: 30