---
# tasks file for install_microk8s
- name: Make sure snapd is installed
  package:
    name:
      - snapd
    state: latest
  become: yes

- name: Install microk8s
  become: yes
  snap:
    name: microk8s
    classic: yes
    channel: "{{ microk8s_version }}"

- name: Wait for microk8s to be ready
  become: yes
  command: "{{ microk8s_bin_path }}microk8s.status --wait-ready"
  changed_when: false
  register: mk8sstatusout
  failed_when:
      - "'This MicroK8s deployment is acting as a node in a cluster.' not in mk8sstatusout.stdout_lines"
      - mk8sstatusout.rc > 0

- name: Create kubectl alias
  become: yes
  command: "snap alias microk8s.kubectl kubectl"
  changed_when: false
  register: aliaskubectlout

- name: Create helm3 alias
  become: yes
  command: "snap alias microk8s.helm3 helm"
  changed_when: false
  register: aliashelmout
  when:
    - "'helm3' in microk8s_plugins"
    - microk8s_plugins.helm3

- name: Create custom certificates
  become: yes
  ansible.builtin.template:
    src: "{{ microk8s_csr_template }}"
    dest: /var/snap/microk8s/current/certs/csr.conf.template
    mode: 0644
  when: microk8s_csr_template is defined and microk8s_csr_template is file
  notify:
  - Refresh certs

- name: Create folder for microk8s certificates
  become: yes
  file:
    path: /usr/share/ca-certificates/extra
    state: directory
    mode: 0755

- name: Copy certificates
  become: yes
  copy:
    src: "{{ item }}"
    dest: /usr/share/ca-certificates/extra
    remote_src: yes
    force: yes
    mode: 0644
  with_fileglob:
    - /var/snap/microk8s/current/certs/*ca*.crt

- name: Trust certificates generated by microk8s
  become: yes
  command: "update-ca-certificates"
  register: command_result
  changed_when: "'0 added, 0 removed' not in command_result.stdout"

- name: Stop microk8s
  become: yes
  command: "microk8s stop"

- name: Set node IP in kubelet args
  become: yes
  lineinfile:
    path: /var/snap/microk8s/current/args/kubelet
    line: "--node-ip={{ hostvars[inventory_hostname]['ansible_host'] }}"
    state: present

- name: Set advertise address in kube-apiserver args
  become: yes
  lineinfile:
    path: /var/snap/microk8s/current/args/kube-apiserver
    line: "--advertise-address={{ hostvars[inventory_hostname]['ansible_host'] }}"
    state: present

# - name: Set bind address in kube-apiserver args
#   become: yes
#   lineinfile:
#     path: /var/snap/microk8s/current/args/kube-apiserver
#     line: "--bind-address={{ hostvars[inventory_hostname]['ansible_host'] }}"
#     state: present

# - name: Set bind address in kube-controller-manager args
#   become: yes
#   lineinfile:
#     path: /var/snap/microk8s/current/args/kube-controller-manager
#     line: "--bind-address={{ hostvars[inventory_hostname]['ansible_host'] }}"
#     state: present

# - name: Set bind address in kube-scheduler args
#   become: yes
#   lineinfile:
#     path: /var/snap/microk8s/current/args/kube-scheduler
#     line: "--bind-address={{ hostvars[inventory_hostname]['ansible_host'] }}"
#     state: present

# - name: Set bind address in kube-proxy args
#   become: yes
#   lineinfile:
#     path: /var/snap/microk8s/current/args/kube-proxy
#     line: "--bind-address={{ hostvars[inventory_hostname]['ansible_host'] }}"
#     state: present

- name: Restart microk8s
  become: yes
  command: "sudo snap start microk8s"

- name: Debug added lines
  debug:
    msg: 
      - "Node IP in kubelet: --node-ip={{ hostvars[inventory_hostname]['ansible_host'] }}"
      - "Advertise address in kube-apiserver: --advertise-address={{ hostvars[inventory_hostname]['ansible_host'] }}"
      - "Bind address in kube-apiserver: --bind-address={{ hostvars[inventory_hostname]['ansible_host'] }}"
      - "Bind address in kube-controller-manager: --bind-address={{ hostvars[inventory_hostname]['ansible_host'] }}"
      - "Bind address in kube-scheduler: --bind-address={{ hostvars[inventory_hostname]['ansible_host'] }}"
      - "Bind address in kube-proxy: --bind-address={{ hostvars[inventory_hostname]['ansible_host'] }}"

- name: Wait for microk8s to be ready
  become: yes
  command: "{{ microk8s_bin_path }}microk8s.status --wait-ready"
  changed_when: false
  register: mk8sstatusout